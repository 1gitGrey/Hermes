{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Hermes\r\n\r\nHermes is an environment for Ruby and JavaScript developers in Darwin using\r\n[Tmux](http://tmux.sourceforge.net/), [Vim](http://www.vim.org/) and [iTerm\r\n2](http://www.iterm2.com/) that focuses on speed and ease of use.\r\n\r\nHermes is opinionated where having an opinion is important, but does not\r\nprevent you from customizing your tools.\r\n\r\nHermes gives you a lot of things for free:\r\n\r\n- Sensible defaults for developers.\r\n- Integration of Vim into tmux and tmux into iTerm 2.\r\n- Mouse and window integration, allowing selections within tmux and Vim panes,\r\n  not across them.\r\n- Vim packages that provide git integration, command- and block-completion,\r\n  fuzzy file search and ease of testing.\r\n\r\nWe feel that good documentation is a key part of using any new technology with\r\nlots of moving parts, so we will be improving Hermes' documentation in the days\r\nand weeks to come.\r\n\r\n![Hermes screenshot](https://raw.github.com/New-Bamboo/Hermes/master/hermes.png)\r\n\r\n\r\n## Preliminary Thanks\r\n\r\nHermes combines plugins, settings, snippets, gists, and ideas from countless\r\ndevelopers around the world. We would like to thank:\r\n\r\n- The [Vim](http://www.vim.org/) team.\r\n- The [Tmux](http://tmux.sourceforge.net/) team.\r\n- The [GNU Bash](http://www.gnu.org/software/bash/bash.html) and [Fish](http://ridiculousfish.com/shell/) teams\r\n- The [Homebrew](http://mxcl.github.com/homebrew/) team.\r\n- [Tim Pope](http://tpo.pe/). Seriously, you're awesome.\r\n- [Thoughtbot](http://thoughtbot.com/) for their dotfiles, essential in getting\r\n  the Tmux configuration right.\r\n- [Vimcasts](http://vimcasts.org/), for showing the world just how powerful Vim can be.\r\n\r\n\r\n## Installation\r\n\r\n**Warning!** Hermes is still early in development, so just to be\r\ncareful, we strongly encourage you to install it in a separate\r\nuser account, not your main one. That said, we *have* tested it on\r\nour own user accounts, where it worked just fine.\r\n\r\nYou can check to see which files will be overwritten in\r\nmanifests/dotfile_manifest, or\r\n[follow this link](https://github.com/New-Bamboo/Hermes/blob/master/manifests/dotfile_manifest)\r\nto view it on Github.\r\n\r\n\r\n### Prerequisites\r\n\r\nHermes relies on Homebrew and RVM to work properly. While Homebrew is a de\r\nfacto standard developers using OS X, there are a good number of people that\r\nuse RBenv, so support for that is in the pipeline. We are happy to look at any\r\npull requests.\r\n\r\nIf these two tools are not available, the installer script will halt. Please\r\nrefer to these tools' excellent documentation for installation instructions.\r\n\r\n\r\n### Fork first!\r\n\r\nAs the very first step, you should fork the Hermes on Github since this will\r\nmake it easier for you to customize your installation. After you're done, you\r\ncan run:\r\n\r\n    mkdir -p ~/.hermes\r\n    git clone https://github.com/<your_github_username>/Hermes.git ~/.hermes\r\n    cd ~/.hermes\r\n    ./install.bash\r\n\r\nThis will perform the following actions:\r\n\r\n- Check that you have all the needed Homebrew dependencies\r\n- Back up any file or folder that would be overwritten by the installer process\r\n- Install all dotfiles and plugins available in the `hermes` directory and\r\n  symlink them to the right locations in your home folder\r\n\r\nYou may also want to add Hermes's repository as an upstream repository, so you\r\ncan pull in the changes done on the main trunk whenever you need to.\r\n\r\n![Hermes installation](https://raw.github.com/New-Bamboo/Hermes/master/hermes-install.png)\r\n\r\n### What's included in the installer\r\n\r\nThe installer will:\r\n\r\n- check for dependencies\r\n- backup any existing dotfile that would be overwritten in a timestamped tar\r\n  file that you can use to restore your previous configuration\r\n- install a number of required Homebrew packages\r\n- create a `~/hermes` directory and symlink its content to your home folder\r\n  where every piece of software expects to find its main configuration file(s)\r\n\r\nHermes includes:\r\n\r\n- configuration and plugins for Vim\r\n- configuration for Tmux\r\n- configuration for git\r\n- configuration and additional functionality for two shells: Bash and Fish.\r\n- settings for `gem`, `ack`, `pow`, `pry` and `irb`\r\n\r\nIn addition, Hermes glues all components together so they play nicely with each\r\nother and the OS. Two examples of this integration are are Hermes' support for\r\nthe system clipboard in OS X and window/pane aware mouse integration.\r\n\r\n\r\n### Updates\r\n\r\nBeing a git-based project, you can update Hermes by simply pulling from the\r\nremote. If you forked the project, please remember to add the original repo as\r\nan upstream repository to make getting new project updates easier.\r\n\r\n\r\n## How it's built\r\n\r\nHermes' goal is to provide a solid structure for you to build on top of without\r\nhaving to deal with any intermediate configuration layers.  For example, Vim's\r\nentire configuration is managed canonically through the `~/.vimrc` file and the\r\n`~/.vim` folder. The only significant difference is that under the hood, those\r\nfiles are actually symlinks to your `hermes` folder.\r\n\r\nKnowing how Hermes ties everything together is useful when it comes time to\r\nconfigure it.\r\n\r\n\r\n### Vim\r\n\r\nA stock vim installation with a basic configuration can go a long way and can\r\nbe really beneficial when it comes to editing files on a server.\r\n\r\nThere is however a very simple problem with the default Vim installation that\r\nOS X provides: it cannot access the system clipboard. That means if you copy\r\nanything from outside the editor, it's not available in any of Vim's registers.\r\nWorse yet, if you copy anything in Vim using its internal commands, it won't be\r\navailable to the rest of the system\r\n\r\nTo sort this out, Hermes installs Homebrew's version of Vim, which is\r\navailable through the MacVim package:\r\n\r\n    brew install macvim --override-system-vim\r\n\r\nThis has some additional benefits, like having support for Ruby in plugins.\r\n\r\nLet's now go with some defaults for a basic `.vimrc` file:\r\n\r\n    set nocompatible    \"don't need Vi compatibility\r\n    set nobackup        \"don't create backup files\r\n    set nowritebackup\r\n    set notimeout\r\n    set ttimeout\r\n    set ttimeoutlen=10\r\n    set noswapfile      \"don't create swap files\r\n    set history=50      \"keep a small history\r\n    set ruler           \"always show position\r\n    set showcmd\r\n    set incsearch\r\n    set laststatus=2    \"full status bar\r\n    set t_Co=256        \"256 colors - requires a properly configured terminal emulator\r\n    syntax on           \"turn syntax highlight on\r\n\r\n    filetype plugin indent on \"let plugins manage indentation\r\n\r\n    \" Send more characters for redraws\r\n    set ttyfast\r\n    \" Enable mouse use in all modes\r\n    set mouse=a\r\n    set ttymouse=xterm2\r\n\r\n    \" Fix backspace\r\n    set backspace=indent,eol,start\r\n    fixdel\r\n\r\n    \" Softtabs, 2 spaces\r\n    set tabstop=2\r\n    set shiftwidth=2\r\n    set expandtab\r\n\r\n    \" Display extra whitespace at the end of the line\r\n    set list listchars=tab:»·,trail:·\r\n    \" Clipboard fix for OsX\r\n    set clipboard=unnamed\r\n\r\n    \" Numbers\r\n    set number\r\n    set numberwidth=2\r\n\r\n    \"Folding\r\n    set foldmethod=indent\r\n    set foldlevelstart=99\r\n\r\n    \" Autocompletion options\r\n    set wildmode=list:longest,list:full\r\n    set complete=.,w,b\"\r\n\r\nThese settings will allow you to efficiently edit any file whose type is\r\nsupported by default, so Javascript and Ruby are already covered. The settings\r\nenable standard features like line numbering and syntax highlighting and also\r\nturn on features like mouse support and clipboard sharing that are useful in\r\nintegrating Vim into iTerm and OS X.\r\n\r\n\r\n#### Plugins\r\n\r\nPlugins are a powerful way to extend Vim's capabilities. The implementation may\r\nchange, but we feel you should be able to expect the following from a modern\r\ntext editor:\r\n\r\n- Support for fuzzy search inside a directory tree. You should be able to\r\n  easily open a file by name without navigating the tree.\r\n- Full text search inside a directory tree.\r\n- Snippet support with expansion, tab stops and completion. Like Textmate.\r\n- Integration with testing frameworks. You should be able to run tests without\r\n  leaving the editor.\r\n- Tabs and split windows. You should be able to see tests and the corresponding\r\n  code at the same time and be able to easily switch from one to the other.\r\n- Language specific features, like syntax-aware indentation and navigation.\r\n\r\nNeedless to say, a number of other text editors support these features. Vim,\r\nhowever, combines this with its extremely efficient modal editing approach.\r\n\r\nHermes provides a good number of plugins, aiming to strike a balance between\r\nfeatures and speed. You can see the complete list under `hermes/vim/bundle`,\r\nbut here are some highlights:\r\n\r\n- [Ctrlp](https://github.com/kien/ctrlp.vim): a tool for fuzzy searching by\r\n  file and tag.\r\n- [Snipmate](https://github.com/msanders/snipmate.vim): unashamedly borrowing\r\n  from Textmate, Snipmate provides tab completion based on snippet files.\r\n- [The silver searcher](https://github.com/epmatsw/ag.vim): `ag` is a faster\r\n  alternative to Ack.\r\n- [TComment](https://github.com/vim-scripts/tComment): toggles comments in\r\n  nearly any language.\r\n- [Rails.vim](https://github.com/tpope/vim-rails): provides shortcuts,\r\n  generators and settings for working with Ruby on Rails projects.  Absolutely\r\n  killer.\r\n- [Vimux](https://github.com/benmills/vimux): forms a bridge with Tmux to send\r\n  text and commands to a Tmux pane. Vimux is essential for Hermes' testing\r\n  support.\r\n\r\nHowever, we encourage you to be wary of plugins for several reasons:\r\n\r\n- Vim has many conventional ways to accomplish certain tasks, and while it's\r\n  possible to do things in many ways, it's important to try to understand the\r\n  Vim way of doing things and play to its strengths.\r\n- One of Vim's benefits is speed and low memory footprint, making it responsive\r\n  even when opening huge files. Increasing Vim's footprint through excessive\r\n  numbers of plugins can eliminate this benefit.\r\n- Sometimes a plugin is not necessary. Similar or identical effects can often\r\n  be achieved with smaller, well thought-out changes in your .vimrc.\r\n- Although powerful, Vim is a text editor and should do just this one job well.\r\n\r\nVim's approach to plugin management is a little counterintuitive:\r\nby default, Vim looks for additional scripts to load in `~/.vim`,\r\nwhich has subfolders that determine when the configuration is\r\nloaded. For example, a script can be split across the `plugin` and\r\nthe `autoload` directories, the former for the bulk, load-once\r\nfunctionality while the latter for anything that requires constant\r\nrecalculation. This means that a manual installation may be spread\r\nacross multiple directories, resulting in a structure that is\r\ndifficult to maintain and update.\r\n\r\nEnter [Pathogen](https://github.com/tpope/vim-pathogen), a package\r\nmanager that makes this process painless and that inverts the\r\nusual installation pattern, as it lets you organize plugins based\r\non their name. With Pathogen, you can simply clone a repository into\r\nyour `~/.vim` folder and you're done. This is the first stepping\r\nstone to efficient dotfile management through a git repository\r\nwhere you can add all your plugins as git submodules and update\r\nall of them with a single command.\r\n\r\nHermes uses git submodules extensively: since Pathogen allows\r\nus to keep each plugin in a separate folder, we can include all of\r\nour plugins as submodules in the `hermes/vim/bundle` folder. This\r\nmakes it dead easy to add other plugins and keep them up-to-date:\r\n\r\n    cd ~/.hermes\r\n    git submodule add <github-url> hermes/vim/bundle/<plugin-name>\r\n\r\nAnd you're done! Updating plugins is similarly straightforward:\r\n\r\n    cd ~/.hermes\r\n    git submodule foreach git pull origin master\r\n\r\nAs in every other Github-based project, it's advisable\r\nto fork a plugin if you need to make changes that go\r\nbeyond simple configuration (which we usually add to\r\n`~/.hermes/vim/plugins.vim`). In that case, you would need to\r\nremove the original submodule completely and add it back again\r\nusing your fork as the source.\r\n\r\nPathogen loads the contents of `~/.vim/bundle` by default.\r\nincluding itself. This is controlled by the first two lines in the\r\n`~/.vimrc` file:\r\n\r\n    \" loading pathogen at runtime as it's bundled\r\n    runtime bundle/vim-pathogen/autoload/pathogen.vim\r\n    call pathogen#infect()\r\n\r\n\r\n#### Managing configuration\r\n\r\nIf you keep extending your `.vimrc`, it comes to a point where\r\nit's simply too long, so it makes sense to split it into separate\r\nchunks of related configuration. Here's an example from the bottom\r\nof a `.vimrc`:\r\n\r\n    source $HOME/.vim/autocommands.vim\r\n    source $HOME/.vim/plugins.vim\r\n    source $HOME/.vim/shortcuts.vim\r\n\r\n**Tip**: Pressing `gf` in Vim's normal mode will open the file under\r\nthe cursor.\r\n\r\nWe recommend that when working with new plugins, you add one at a\r\ntime and pay close attention to their documentation. Plugins\r\nare often extremely configurable, as you can see in Hermes'\r\n`plugins.vim` file. Taking the time to develop a feel for how each\r\nplugin works and configuring them for your specific needs can go a\r\nlong way in optimising your workflow.\r\n\r\nDocumentation is usually available by typing `:help <term-to-search>`. \r\nHowever, Hermes has a custom shortcut you can use: by pressing `<leader>h` \r\nwith the cursor over a word, you can search for that word in Vim's help.\r\n\r\nAs an example, let's look at the configuration Hermes supplies for\r\n**Ctrl-p** (in `~/.hermes/hermes/vim/plugins.vim`):\r\n\r\n    set wildignore+=*/.hg/*,*/.svn/*,*/vendor/cache/*,*/public/system/*,*/tmp/*,*/log/*,*/.git/*,*/.jhw-cache/*,*/solr/data/*,*/node_modules/*,*/.DS_Store\r\n\r\nThe `wildignore` flag is not Ctrl-p specific, as it's used by Vim\r\nor many autocompletion and expansion functions: the more unlikely\r\ntargets we remove, the better Vim's performance will be. Since\r\nCtrl-p uses this pattern to determine a baseline for excluding\r\nfiles when creating its index, this simple addition will help keep\r\nit snappy.\r\n\r\n\r\n#### Daily use cases\r\n\r\nHere are a few examples of what you can do with Vim, bearing in\r\nmind that this is not meant to be an exhaustive guide. Instead, we\r\nwill focus on frequent everyday tasks:\r\n\r\n\r\n##### Shelling out\r\n\r\nHaving the shell at your disposal can speed up your workflow many\r\ntimes over, but to really take advantage of this it's important to\r\nlearn how to alternate between Vim and the command line.\r\n\r\nSometimes you just need to run a simple shell command, like\r\ncreating a file or directory (i.e. folder). In that situation,\r\npress `:` in normal mode to enter the command mode. Then type `!`\r\nto tell Vim to shell out and perform the command in the shell. So,\r\nif you want to create a `sample` directory, you can type:\r\n\r\n    :!mkdir sample\r\n\r\nThe command will be performed from within the current working\r\ndirectory, you can verify that with `:pwd`.\r\n\r\nWhen you need to step out of the file you're editing, perform a\r\nfew tasks and then go back, your best option is to suspend Vim\r\nusing the shell via `ctrl-z` and then resume it with by typing\r\nthe command `fg` (foreground) when you're done. This is a very\r\nstraightforward approach and widely used in the Unix world. It\r\nworks out of the box.\r\n\r\nAlternatively, you can use a different window or pane with Tmux,\r\nas we shall explain later on.\r\n\r\nAs always, you can associate a shortcut for a shell command you\r\nwant to run: a good example is creating a leader command to run\r\nthe current file as a spec.\r\n\r\n    noremap <leader>s :!bundle exec rspec %<cr>\r\n\r\nWe use `noremap` to tell Vim to create a key map for normal mode,\r\nassign it to `<leader>s` and then specify the command, a simple\r\n`bundle exec rspec` where we include the current file as an argument\r\nand then press enter (carriage return).\r\n\r\n\r\n##### Search and replace\r\n\r\nSearch and replace in Vim is a kind of regular expression usage.\r\nVim expects you to provide a range and then a substitution command\r\nto perform.\r\n\r\nSo if you type:\r\n\r\n    :%s/foo/bar\r\n\r\nIt will search in the whole buffer `%` and substitute the first\r\noccurence of `foo` with `bar`. As you can imagine, you can pass\r\nflags to the command, like:\r\n\r\n    :%s/foo/bar/gi\r\n\r\nThe `g` flag predictably tells Vim to perform a global search and\r\nreplace, with multiple replacements, while the `i` (interactive)\r\nflag will allow you to confirm each substitution individually.\r\n\r\nIf you need to act on a specific number of lines, you have two\r\noptions:\r\n\r\n- You can pass a range of lines, like `:12,15s/foo/bar`\r\n- You can select a visual block, press `:` followed by the\r\n  substitution command (`s/foo/bar`). Note that the command bar\r\n  will be prepopulated with the expression indicating the currently\r\n  selected visual range (`'<,'>`)\r\n\r\nA common complaint by many people who switch from a graphical\r\neditor to Vim is that there's no facility to execute a\r\nsubstitution command across files. Vim provides such tools by\r\nfollowing a simple pattern:\r\n\r\n- Add all the files to the arguments list\r\n- Perform a search and replace on each file contained in such list\r\n\r\nThis can be tricky: the argument list is the files of all\r\ncurrently open files and can be completely different from the\r\nbuffer list. So if we wanted to perform a search and replace on\r\nall `*.rb` files in the current working directory we would do:\r\n\r\n    :args ./**.rb\r\n    :argdo %s/foo/bar/gi\r\n\r\nNote the `i` flag, which is a lifesaver. The `argdo` command\r\niterates over the argument list and performs the sspecified\r\ncommand (we still need the `%` to act on the whole file).\r\n\r\n(If you use Vim's tabs feature, see also `tabdo` for a way of\r\ndoing operations across all your tabs.)\r\n\r\nA different approach, and what we suggest, is not using Vim\r\naltogether but a shell based substitution.\r\n\r\nFirst of all, you should make sure that you're working with some\r\nsort of VCS, because what we're about to do is not easily\r\nreversible.\r\n\r\nWe will be using Perl, as it's fast, powerful and simple.\r\n\r\nThe aforementioned substitution can be achieved with:\r\n\r\n    perl -i.bak -pe's/foo/bar/g' ./**.rb\r\n\r\nA VERY IMPORTANT NOTE: the above pattern is usually safe in the\r\ncontext of a Rails application, but if the pattern you used finds\r\nfiles inside `.git`, it will perform the substitution on them as\r\nwell, potentially damaging your Git index. This can happen if your\r\nglob pattern is too loose or if you have submodules written in the\r\nsame language.\r\n\r\nHowever, the `-i.bak` argument does create a backup of the\r\noriginal file, so you'll need to delete the .bak files after the\r\nsubstitution. If you really know what you're doing, you can just\r\nuse the `-i` by itself.\r\n\r\nA safer approach, and one which makes also the search and replace\r\ncommand easier to manage, is to move into subfolders and perform\r\nit in different steps. This will also make it easier to check,\r\ntest and manage.\r\n\r\n\r\n##### Visual mode\r\n\r\nYou can access Vim's \"visual\" model by pressing `v` (character\r\nselection) or `V` (line selection). When in visual mode, any\r\nmovement will modify the selection. You can also click-drag a\r\nscreen selection with the mouse, which will automatically put you\r\nin visual mode. Working in visual mode can be powerful, but in\r\ngeneral it's advisable not to use it too often, since the actions\r\nyou take in visual mode are not recorded in a way that can easily\r\nbe repeated, e.g. `.` in normal mode.\r\n\r\nThere are, however, situations where visual mode has a clear\r\nadvantage. One technique, making use of a \"visual block\", is great\r\nfor doing the same thing to several lines at once.\r\n\r\nImagine this text in Vim:\r\n\r\n    a = 1\r\n    b = 2\r\n    c = 3\r\n\r\nIf we wanted to prepend the keyword `var` to every line shown\r\nabove, we could to the following:\r\n\r\n- With the cursor on `a`, create a visual block by pressing\r\n  `ctrl-v`.\r\n- Hit `jj` to move down two lines.\r\n- Press `I`, type `var ` (with a space at the end) and then press\r\n  `Esc` to return to normal mode.\r\n\r\nThe var keyword should be prepended to each of the lines.\r\n\r\nNote that this is not the only way to do this. For example, a\r\nmacro or a normal mode command would have worked equally well.\r\nThis latter approach is in fact usually more effective:\r\n\r\n- With the cursor on `a`, press `V` and `jj` to highlight all 3 lines\r\n- Enter `:` and ` :norm Ivar `\r\n- Press Enter\r\n\r\nWhen a visual range is selected, pressing `:` opens the command\r\nprompt with the range prefilled. By typing `:norm`, Vim\r\ntemporarily switches to normal mode, executing the subsequent\r\ncommand for each line in the visual range. We just used `I` to\r\njump before the first letter in normal mode and type `var`.\r\n\r\nThis approach is good when the change we're making doesn't need to\r\nbe repeated. In other situations, a macro is more effective.\r\n\r\n\r\n#### Working with Tmux\r\n\r\nEven if Vim by itself is indeed extremely powerful, it just shines when paired\r\nwith Tmux. Tmux is a terminal multiplexer, a program to manage multiple shell\r\ninstances in the scope of a single session (whether it's local or SSH it doesn't\r\nmatter).\r\n\r\nIn other words, Tmux allows the creation of separate tabs (called windows) and\r\nsplits (called panes), interaction between them and an external api for\r\nprogrammatic control.\r\n\r\nThe recurring question that people ask when hearing about Tmux for the first\r\ntime is \"Why should I use this instead of the native functionality provided by\r\nmy terminal emulator?\". Here's why:\r\n\r\n- Tmux is terminal emulator independent, i.e. you can use it with any terminal\r\n  emulator (there are a few edge cases in terms of compatibility, but the usual\r\nsuspects on Mac OsX and Linux are well supported).\r\n- Tmux can start a session, suspend it (called detach) and resume it (called\r\n  attach), everything from different machines and over a network connection as\r\nwell.\r\n- Tmux has an api for external control by a 3rd party software and we'll see\r\n  that this is key in our setup.\r\n- If you accidentally close your terminal emulator, you don't lose anything as\r\n  it runs in a separate process.\r\n- Tmux is designed to be controlled with keyboard only and it features a\r\n  powerful Vim compatibility mode that uses identical shortcuts.\r\n\r\nHermes includes an opinionated Tmux setup that solves a few compatibility issues\r\nwith OsX, rebinds many shortcuts to an easier to remember layout and adds a few\r\nbells and whistles (like date, time and battery information in the status bar).\r\nHuge thanks to Thoughtbot for sharing most of the code that made it into this\r\nconfiguration.\r\n\r\n##### Basic interaction\r\n\r\nIf you type `tmux` in your shell, you will start a new session. As we haven't\r\npassed a name, the session will receive an incremental number to identify it.\r\nTmux allows switching between different sessions, so ideally you would want a\r\nseparate one for each project you're working on.\r\n\r\nAt the bottom, you can see the list of windows on the left. This shows the\r\ncurrent session windows, highlighting the current one. Windows also have an\r\nindex, shown right on the left of the name.\r\n\r\nThe window behaves exactly like a \"normal\" terminal window, with just a couple\r\nof exceptions:\r\n\r\n- Some shortcuts (like Cmd+k to clear the screen) can have unexpected\r\n  behaviours. Where sensible, the configuration provides fallbacks.\r\n- Mouse interaction is supported, but only with iTerm2 as terminal emulator (the\r\n  default OsX terminal doesn't support it)\r\n\r\nAll tmux commands start with a prefix, set in this configuration to `Ctrl-a`: as\r\na convention, this document will call this shortcut 'prefix', so `prefix-c`\r\nmeans 'press Ctrl-a, then c'.\r\n\r\nHere are some basic commands:\r\n\r\n- `prefix-1`, `prefix-2` switches to the window identified by that index;\r\n- `prefix-c` creates a new window;\r\n- `prefix-|` splits the current window **vertically**;\r\n- `prefix-_` splits the current window **horizontally**;\r\n- `prefix-spacebar` switches between horizontal and vertical layout for panes;\r\n- `prefix-x` closes the current pane.\r\n- `prefix-a` cycles focus among the current window panes;\r\n- `prefix-h/j/k/l` moves the focus respectively to the left, below, above and\r\n  right from the current pane (very similar to Vim);\r\n- `prefix-r` reloads the tmux configuration (useful if you make some changes);\r\n- `prefix-:` enters tmux command mode, where you can type tmux commands to\r\n  perform certain actions in a dedicated command line (this is advanced usage).\r\n\r\nYou can also change focus from one pane to another using the mouse, however that\r\nis usually slower than mastering keyboard shortcuts.\r\n\r\n##### Scrolling, copy and paste\r\n\r\nAs expected, you can scroll inside a pane with your mouse, but Tmux supports\r\ncomplete mouseless interaction even for this kind of operation. This is possible\r\nby entering 'copy mode', where (similarly to Vim's normal and visual modes,\r\npressing keyboard keys doesn't enter text but performs actions). Copy mode is\r\nidentified by a status indicator in the top right corner of the pane (showing\r\nyour cursor position in the current scroll buffer).\r\n\r\nCopy mode can be entered by pressing `prefix-esc`, but it can be alternatively\r\nactivated by:\r\n\r\n- pressing `prefix-pageUp` or `prefix-pageDown`, so that after entering copy\r\n  mode it scrolls up or down.\r\n- scrolling with the mouse on a pane, or initiating a drag and drop selection.\r\n\r\nCommands in copy mode are pretty much identical to Vim and that's because Tmux\r\nhandily supports a Vim compatibility mode, so that you don't have to change your\r\nhabits.\r\n\r\n- `/` will initiate a forward search. Simmetrically, `?` will initiate a\r\n  backward one;\r\n- `pageUp` and `pageDown` will scroll the pane;\r\n- `g` and `G` will go respectively to the top and the bottom;\r\n- `v` initiates visual selection, so that you can select a visual portion of\r\n  text and then, for example, press `y` to copy it.\r\n\r\nTo see a list of all possible combinations, press `prefix-:` to enter command\r\nmode and type `list-keys -t vi-copy`. Note also that a good set of motions are\r\nsupported, so you can type `v4w` to select 4 words from the current one.\r\n\r\nAllow yourself some time to master copy mode, as it's extremely powerful.\r\n\r\nNote that if you use the mouse and perform a drag selection, text will be\r\nautomatically copied into the clipboard upon releasing the left mouse button.\r\n\r\n# License\r\n\r\n## This code is free to use under the terms of the MIT license.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n# Copyright\r\n\r\nCopyright ©2012 New Bamboo Web Development Limited\r\n","name":"Hermes","google":"UA-201102-21","tagline":"An environment for Ruby and JS developers in Darwin"}