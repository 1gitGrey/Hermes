{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"An environment for Ruby and JS developers in Darwin","name":"Hermes","body":"# Hermes\r\n\r\nHermes is an environment for Ruby and JavaScript developers in Darwin using\r\n[Tmux](http://tmux.sourceforge.net/), [Vim](http://www.vim.org/) and [iTerm\r\n2](http://www.iterm2.com/) that focuses on speed and ease of use.\r\n\r\nHermes is opinionated where having an opinion is important, but does not\r\nprevent you from customizing your tools.\r\n\r\nHermes gives you a lot of things for free:\r\n\r\n- Sensible defaults for developers.\r\n- Integration of Vim into tmux and tmux into iTerm 2.\r\n- Mouse and window integration, allowing selections within tmux and Vim panes,\r\n  not across them.\r\n- Vim packages that provide git integration, command- and block-completion,\r\n  fuzzy file search and ease of testing.\r\n\r\nWe feel that good documentation is a key part of using any new technology with\r\nlots of moving parts, so we will be improving Hermes' documentation in the days\r\nand weeks to come.\r\n\r\n![Hermes screenshot](https://raw.github.com/New-Bamboo/Hermes/master/hermes.png)\r\n\r\n\r\n## Preliminary Thanks\r\n\r\nHermes combines plugins, settings, snippets, gists, and ideas from countless\r\ndevelopers around the world. We would like to thank:\r\n\r\n- The [Vim](http://www.vim.org/) team.\r\n- The [Tmux](http://tmux.sourceforge.net/) team.\r\n- The [GNU Bash](http://www.gnu.org/software/bash/bash.html) and [Fish](http://ridiculousfish.com/shell/) teams\r\n- The [Homebrew](http://mxcl.github.com/homebrew/) team.\r\n- [Tim Pope](http://tpo.pe/). Seriously, you're awesome.\r\n- [Thoughtbot](http://thoughtbot.com/) for their dotfiles, essential in getting\r\n  the Tmux configuration right.\r\n- [Vimcasts](http://vimcasts.org/), for showing the world just how powerful Vim can be.\r\n\r\n\r\n## Installation\r\n\r\n**Warning!** Hermes is still early in development, so just to be\r\ncareful, we strongly encourage you to install it in a separate\r\nuser account, not your main one. That said, we *have* tested it on\r\nour own user accounts, where it worked just fine.\r\n\r\n\r\n### Prerequisites\r\n\r\nHermes relies on Homebrew and RVM to work properly. While Homebrew is a de\r\nfacto standard developers using OS X, there are a good number of people that\r\nuse RBenv, so support for that is in the pipeline. We are happy to look at any\r\npull requests.\r\n\r\nIf these two tools are not available, the installer script will halt. Please\r\nrefer to these tools' excellent documentation for installation instructions.\r\n\r\n\r\n### Fork first!\r\n\r\nAs the very first step, you should fork the Hermes on Github since this will\r\nmake it easier for you to customize your installation. After you're done, you\r\ncan run:\r\n\r\n    mkdir -p ~/.hermes\r\n    git clone https://github.com/<your_github_username>/Hermes.git ~/.hermes\r\n    cd ~/.hermes\r\n    ./install.bash\r\n\r\nThis will perform the following actions:\r\n\r\n- Check that you have all the needed Homebrew dependencies\r\n- Back up any file or folder that would be overwritten by the installer process\r\n- Install all dotfiles and plugins available in the `hermes` directory and\r\n  symlink them to the right locations in your home folder\r\n\r\nYou may also want to add Hermes's repository as an upstream repository, so you\r\ncan pull in the changes done on the main trunk whenever you need to.\r\n\r\n![Hermes installation](https://raw.github.com/New-Bamboo/Hermes/gh-pages/images/hermes-install.png)\r\n\r\n### What's included in the installer\r\n\r\nThe installer will:\r\n\r\n- check for dependencies\r\n- backup any existing dotfile that would be overwritten in a timestamped tar\r\n  file that you can use to restore your previous configuration\r\n- install a number of required Homebrew packages\r\n- create a `~/hermes` directory and symlink its content to your home folder\r\n  where every piece of software expects to find its main configuration file(s)\r\n\r\nHermes includes:\r\n\r\n- configuration and plugins for Vim\r\n- configuration for Tmux\r\n- configuration for git\r\n- configuration and additional functionality for two shells: Bash and Fish.\r\n- settings for `gem`, `ack`, `pow`, `pry` and `irb`\r\n\r\nIn addition, Hermes glues all components together so they play nicely with each\r\nother and the OS. Two examples of this integration are are Hermes' support for\r\nthe system clipboard in OS X and window/pane aware mouse integration.\r\n\r\n\r\n### Updates\r\n\r\nBeing a git-based project, you can update Hermes by simply pulling from the\r\nremote. If you forked the project, please remember to add the original repo as\r\nan upstream repository to make getting new project updates easier.\r\n\r\n\r\n## How it's built\r\n\r\nHermes' goal is to provide a solid structure for you to build on top of without\r\nhaving to deal with any intermediate configuration layers.  For example, Vim's\r\nentire configuration is managed canonically through the `~/.vimrc` file and the\r\n`~/.vim` folder. The only significant difference is that under the hood, those\r\nfiles are actually symlinks to your `hermes` folder.\r\n\r\nKnowing how Hermes ties everything together is useful when it comes time to\r\nconfigure it.\r\n\r\n\r\n### Vim\r\n\r\nA stock vim installation with a basic configuration can go a long way and can\r\nbe really beneficial when it comes to editing files on a server.\r\n\r\nThere is however a very simple problem with the default Vim installation that\r\nOS X provides: it cannot access the system clipboard. That means if you copy\r\nanything from outside the editor, it's not available in any of Vim's registers.\r\nWorse yet, if you copy anything in Vim using its internal commands, it won't be\r\navailable to the rest of the system\r\n\r\nTo sort this out, Hermes installs Homebrew's version of Vim, which is\r\navailable through the MacVim package:\r\n\r\n    brew install macvim --override-system-vim\r\n\r\nThis has some additional benefits, like having support for Ruby in plugins.\r\n\r\nLet's now go with some defaults for a basic `.vimrc` file:\r\n\r\n    set nocompatible    \"don't need Vi compatibility\r\n    set nobackup        \"don't create backup files\r\n    set nowritebackup\r\n    set notimeout\r\n    set ttimeout\r\n    set ttimeoutlen=10\r\n    set noswapfile      \"don't create swap files\r\n    set history=50      \"keep a small history\r\n    set ruler           \"always show position\r\n    set showcmd\r\n    set incsearch\r\n    set laststatus=2    \"full status bar\r\n    set t_Co=256        \"256 colors - requires a properly configured terminal emulator\r\n    syntax on           \"turn syntax highlight on\r\n\r\n    filetype plugin indent on \"let plugins manage indentation\r\n\r\n    \" Send more characters for redraws\r\n    set ttyfast\r\n    \" Enable mouse use in all modes\r\n    set mouse=a\r\n    set ttymouse=xterm2\r\n\r\n    \" Fix backspace\r\n    set backspace=indent,eol,start\r\n    fixdel\r\n\r\n    \" Softtabs, 2 spaces\r\n    set tabstop=2\r\n    set shiftwidth=2\r\n    set expandtab\r\n\r\n    \" Display extra whitespace at the end of the line\r\n    set list listchars=tab:»·,trail:·\r\n    \" Clipboard fix for OsX\r\n    set clipboard=unnamed\r\n\r\n    \" Numbers\r\n    set number\r\n    set numberwidth=2\r\n\r\n    \"Folding\r\n    set foldmethod=indent\r\n    set foldlevelstart=99\r\n\r\n    \" Autocompletion options\r\n    set wildmode=list:longest,list:full\r\n    set complete=.,w,b\"\r\n\r\nThese settings will allow you to efficiently edit any file whose type is\r\nsupported by default, so Javascript and Ruby are already covered. The settings\r\nenable standard features like line numbering and syntax highlighting and also\r\nturn on features like mouse support and clipboard sharing that are useful in\r\nintegrating Vim into iTerm and OS X.\r\n\r\n\r\n#### Plugins\r\n\r\nPlugins are a powerful way to extend Vim's capabilities. The implementation may\r\nchange, but we feel you should be able to expect the following from a modern\r\ntext editor:\r\n\r\n- Support for fuzzy search inside a directory tree. You should be able to\r\n  easily open a file by name without navigating the tree.\r\n- Full text search inside a directory tree.\r\n- Snippet support with expansion, tab stops and completion. Like Textmate.\r\n- Integration with testing frameworks. You should be able to run tests without\r\n  leaving the editor.\r\n- Tabs and split windows. You should be able to see tests and the corresponding\r\n  code at the same time and be able to easily switch from one to the other.\r\n- Language specific features, like syntax-aware indentation and navigation.\r\n\r\nNeedless to say, a number of other text editors support these features. Vim,\r\nhowever, combines this with its extremely efficient modal editing approach.\r\n\r\nHermes provides a good number of plugins, aiming to strike a balance between\r\nfeatures and speed. You can see the complete list under `hermes/vim/bundle`,\r\nbut here are some highlights:\r\n\r\n- [Ctrlp](https://github.com/kien/ctrlp.vim): a tool for fuzzy searching by\r\n  file and tag.\r\n- [Snipmate](https://github.com/msanders/snipmate.vim): unashamedly borrowing\r\n  from Textmate, Snipmate provides tab completion based on snippet files.\r\n- [The silver searcher](https://github.com/epmatsw/ag.vim): `ag` is a faster\r\n  alternative to Ack.\r\n- [TComment](https://github.com/vim-scripts/tComment): toggles comments in\r\n  nearly any language.\r\n- [Rails.vim](https://github.com/tpope/vim-rails): provides shortcuts,\r\n  generators and settings for working with Ruby on Rails projects.  Absolutely\r\n  killer.\r\n- [Vimux](https://github.com/benmills/vimux): forms a bridge with Tmux to send\r\n  text and commands to a Tmux pane. Vimux is essential for Hermes' testing\r\n  support.\r\n\r\nHowever, we encourage you to be wary of plugins for several reasons:\r\n\r\n- Vim has many conventional ways to accomplish certain tasks, and while it's\r\n  possible to do things in many ways, it's important to try to understand the\r\n  Vim way of doing things and play to its strengths.\r\n- One of Vim's benefits is speed and low memory footprint, making it responsive\r\n  even when opening huge files. Increasing Vim's footprint through exxcessive\r\n  numbers of plugins can eliminate this benefit.\r\n- Sometimes a plugin is not necessary. Similar or identical effects can often\r\n  be achieved with smaller, well thought-out changes in your .vimrc.\r\n- Although powerful, Vim is a text editor and should do just this one job well.\r\n\r\nVim's approach to plugin management is a little counterintuitive:\r\nby default, Vim looks for additional scripts to load in `~/.vim`,\r\nwhich has subfolders that determine when the configuration is\r\nloaded. For example, a script can be split across the `plugin` and\r\nthe `autoload` directories, the former for the bulk, load-once\r\nfunctionality while the latter for anything that requires constant\r\nrecalculation. This means that a manual installation may be spread\r\nacross multiple directories, resulting in a structure that is\r\ndifficult to maintain and update.\r\n\r\nEnter [Pathogen](https://github.com/tpope/vim-pathogen), a package\r\nmanager that makes this process painless and that inverts the\r\nusual installation pattern, as it lets you organize plugins based\r\non their name. With Pathogen, you can simply clone a repository into\r\nyour `~/.vim` folder and you're done. This is the first stepping\r\nstone to efficient dotfile management through a git repository\r\nwhere you can add all your plugins as git submodules and update\r\nall of them with a single command.\r\n\r\nHermes uses the git submodule pattern: because every plugin can be kept in a single folder thanks to Pathogen, it's possible to add it as a submodule in the `hermes/vim/bundle` folder. This makes it dead easy to add other plugins when needed:\r\n\r\n    cd ~/.hermes\r\n    git submodule add <github-url> hermes/vim/bundle/<plugin-name>\r\n\r\nAnd you're done! In a similar fashion, updating plugins is also straightforward\r\n\r\n    cd ~/.hermes\r\n    git submodule foreach git pull origin master\r\n\r\nAs in every other github based project, it's advisable to fork a plugin if you need to make changes that go beyond simple configuration (which we usually add to `~/.hermes/vim/plugins.vim`). In that case, you need to remove the original submodule and add it back again using your fork as a url.\r\n\r\nPathogen loads the content of `~/.vim/bundle` by default. including itself. This is controlled by the first two lines in the `~/.vimrc` file:\r\n\r\n    \" loading pathogen at runtime as it's bundled\r\n    runtime bundle/vim-pathogen/autoload/pathogen.vim\r\n    call pathogen#infect()\r\n\r\n#### Managing configuration\r\n\r\nIf you keep extending your `.vimrc`, it comes to a point where it's simply too long, so it makes sense to split it into separate chunks that are somewhat related: here's a sample from the bottom of my `.vimrc`:\r\n\r\n    source $HOME/.vim/autocommands.vim\r\n    source $HOME/.vim/plugins.vim\r\n    source $HOME/.vim/shortcuts.vim\r\n\r\nAs a bonus, pressing `gf` in normal mode will open the file under the cursor.\r\n\r\nIn addition, always take care of reading the documentation for the plugins you use, as they're usually extremely configurable (an example is the `plugins.vim`) file.\r\n\r\nDocumentation is usually available by typing `:help <term-to-search>`, however Hermes has a custom shortcut you can use: by pressing `<leader>h` with the cursor on a word, it will search the help docs for the word itself.\r\n\r\nPlugin configuration is vital in the long run, as the purpose of plugins should be to help you, not getting in your way.\r\n\r\nAs an example, let's look at the configuration Hermes supplies for Ctrl-p (in `~/.hermes/hermes/vim/plugins.vim`):\r\n\r\n    set wildignore+=*/.hg/*,*/.svn/*,*/vendor/cache/*,*/public/system/*,*/tmp/*,*/log/*,*/.git/*,*/.jhw-cache/*,*/solr/data/*,*/node_modules/*,*/.DS_Store\r\n\r\nThe `wildignore` flag is not Ctrl-p specific, as it's used by Vim for a lot autocompletion and expansion functions: the more we remove paths and files it's unlikely we want to parse, the better Vim will perform. And as Ctrl-p uses this pattern to determine a baseline for excluding files to create its index, by setting it right we keep it snappy.\r\n\r\n#### Daily use cases\r\n\r\nHere are a few examples of what you can do with Vim, bearing in mind that this is not meant to be an exhaustive guide. Instead, we will focus on recurring tasks that usually pop up during a normal workday.\r\n\r\n##### Shelling out\r\n\r\nHaving the shell at your disposal can speed up your workflow tenfold, but to really take advantage of this it's important to learn how to alternate between Vim and the command line.\r\n\r\nSometimes you just need to run a simple shell command, like creating a directory or touching a file. In that situation, press `:` in normal mode to enter the command mode. Then type `!` to tell Vim to shell out and perform the command in the shell. So, if you want to create a `sample` directory, you can type:\r\n\r\n    :!mkdir sample\r\n\r\nThe command will be performed in the current working directory, you can verify that with `:pwd`.\r\n\r\nWhen you need to step out the file you're editing, perform a few tasks and then go back, your best option is to suspend Vim with `ctrl-z` and then resume it with `fg` when you're done. This is a very straightforward approach, widely used in the Unix world. It works out of the box and has no other requirements.\r\n\r\nAlternatively, you can use a different window or pane with Tmux, as we're detailing in chapter XXX.\r\n\r\nAs always, you can associate a shortcut for a shell command you want to run: a good example is creating a leader command to run the current file as a spec.\r\n\r\n    noremap <leader>s :!bundle exec rspec %<cr>\r\n\r\nWe use `noremap` to tell vim to create a key map for normal mode, assign it to `<leader>s` and then specify the command, a simple `bundle exec rspec` where we press the current file as an argument and then press enter (carriage return).\r\n\r\n\r\n","google":"UA-201102-21"}